server.port=0
#spring.security.oauth2.resourceserver.jwt.issuer-uri = http://localhost:8080/auth/realms/appsdeveloperblog
spring.security.oauth2.resourceserver.jwt.jwk-set-uri = http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/certs
eureka.client.serviceUrl.defaultZone = http://localhost:8010/eureka

eureka.instance.instance-id = ${spring.application.name}:${instanceId:${random.value}}

#When to Prefer IP Address - Note when we do not set any one of the bwlow property and try to start multiple instances of same service then only one get registered with eureka server because hostname is same. To solve this use either preferIpAddress or define instance-id to make multiple instance sof same service unique.
#eureka.instance.preferIpAddress=true or eureka.instance.instance-id = ${spring.application.name}:${instanceId:${random.value}}
#
#Note when we use eureka.instance.prefer-ip-address=true in local host then also eureka only register once instance even though we are running ultiple instances locally. So solve this issue locally use eureka.instance.instance-id = ${spring.application.name}:${instanceId:${random.value}} which generates unique instance id.
#
#In some cases, it is preferable for Eureka to advertise the IP addresses of services rather than the hostname. Set eureka.instance.preferIpAddress to true and, when the application registers with eureka, it uses its IP address rather than its hostname.
#[Tip]
#If the hostname cannot be determined by Java, then the IP address is sent to Eureka. Only explict way of setting the hostname is by setting eureka.instance.hostname property. You can set your hostname at the run-time by using an environment variable — for example, eureka.instance.hostname=${HOST_NAME}.
#eureka.instance.prefer-ip-address=true